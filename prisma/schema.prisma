datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  image         String?
  emailVerified DateTime?
  password      String?
  username      String?   @unique
  bio           String?
  socialLinks   Json?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  topics        Topic[]
  replies       Reply[]
  reports       Report[]   @relation("UserReports")
  resetTokens   PasswordResetToken[]
  sessions      Session[]
  accounts      Account[]
  needsUserName Boolean? @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Topic {
  id        String    @id @default(cuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  replies   Reply[]

  @@index([createdAt])
  @@index([authorId])
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String
  reports   Report[]   @relation("ReplyReports")

  @@index([createdAt])
  @@index([topicId])
}

model Report {
  id         String   @id @default(cuid())
  reply      Reply    @relation("ReplyReports", fields: [replyId], references: [id])
  replyId    String
  reporter   User     @relation("UserReports", fields: [reporterId], references: [id])
  reporterId String
  reason     String
  createdAt  DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([token])
  @@index([userId])
} 

model Demo {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  link        String?
  status      String    @default("unfinished")
  createdAt   DateTime  @default(now())
  comments    Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  demo      Demo     @relation(fields: [demoId], references: [id])
  demoId    Int
  author    String?
  content   String
  createdAt DateTime @default(now())
}