---
description:
globs:
alwaysApply: false
---
# Database Structure

This application uses Prisma as its ORM for database operations. The database schema and migrations are managed in the `prisma` directory.

## Schema
The database schema is defined in [prisma/schema.prisma](mdc:prisma/schema.prisma). This file contains:
- Database connection configuration
- Model definitions
- Relationships between models
- Enums and other database types

## Database Operations
Database operations should be performed using Prisma Client, which is typically initialized in `src/lib/prisma.ts`. Common operations include:

```typescript
// Query example
const users = await prisma.user.findMany()

// Create example
const newUser = await prisma.user.create({
  data: {
    name: 'John Doe',
    email: 'john@example.com'
  }
})
```

## Best Practices
1. Always use Prisma Client for database operations
2. Keep database operations in separate service files
3. Use transactions for operations that need to be atomic
4. Handle database errors appropriately
5. Use Prisma's type safety features

## Migrations
Database migrations are managed through Prisma:
- Create migrations: `npx prisma migrate dev`
- Apply migrations: `npx prisma migrate deploy`
- Reset database: `npx prisma migrate reset`
